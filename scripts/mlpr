#! /bin/bash

echo "Name of the Project: "
read -r project
echo "Your name: "
read -r author

echo "Making the project directories"
mkdir $project
cd $project

echo "Making README files"
echo "
$project
========
$author
$(date)

Notes
-----"  >> README.md


echo "Making directories for working"
mkdir data scripts

echo "Making default scripts"

# DEFAULT PROJECT TEMPLATE
echo "__project__ = '$project'
__author__ = '$author'

import numpy as np
np.random.seed(1)

import pandas as pd
from tqdm import tqdm

from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import (Imputer, MinMaxScaler,
    RobustScaler, PolynomialFeatures,
    LabelEncoder, OneHotEncoder,
    StandardScaler)
from sklearn.cross_validation import cross_val_score
from sklearn.grid_search import GridSearchCV

INDENT = 0
def pr(*args, **kwargs):  # print substitute
    'A reported call tree aware print function'
    pre = '|' + ('-' * INDENT) + '| '
    print(pre, *args, **kwargs)

def report(fn):
    'report the beginning and ending of this functions calls.'
    B, G, R, CLR = '\033[94m', '\033[92m','\033[91m', '\033[0m'
    import time
    def new_fn(*args, **kwargs):
        global INDENT
        INDENT, start = INDENT + 2, time.time()
        print(R, '> starting ', CLR, fn.__name__,
            '{}...'.format(fn.__doc__[:20]))

        results = fn(*args, **kwargs)

        INDENT, end = INDENT - 2, time.time()
        print(G, '> complete ', CLR, fn.__name__,
                'In {}{}{} seconds'.format(B, end - start, CLR))
        return results
    return new_fn
# -----------------------------------------------------------------------------

@report
def load_db():
    raise Exception('Not implemented')
    train, test = None, None
    return train, test

# -----------------------------------------------------------------------------
if __name__ == '__main__':
    df, ts = load_db()
" > scripts/main.py
# TEMPLATE DONE

echo "Creating environment"
virtualenv -p python3 env
source env/bin/activate
pip install numpy scipy sklearn pandas tqdm matplotlib pillow seaborn
pip freeze > requirements.txt
echo "Complete"
