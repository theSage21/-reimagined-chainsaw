#! /bin/bash

echo "Name of the Project: "
read -r project
echo "Your name: "
read -r author

echo "Making the project directories"
mkdir $project
cd $project

echo "Making README files"
echo "
$project
========
$author
$(date)

Notes
-----"  >> README.md


echo "Making directories for working"
mkdir data scripts

echo "Making default scripts"

# DEFAULT PROJECT TEMPLATE
echo "__project__ = '$project'
__author__ = '$author'

import numpy as np
np.random.seed(1)

import pandas as pd
from tqdm import tqdm
from mlpr import report, pr

from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import (Imputer, MinMaxScaler,
    RobustScaler, PolynomialFeatures,
    LabelEncoder, OneHotEncoder,
    StandardScaler)
from sklearn.cross_validation import cross_val_score
from sklearn.grid_search import GridSearchCV
 -----------------------------------------------------------------------------

@report
def load_db():
    raise Exception('Not implemented')
    train, test = None, None
    return train, test

# -----------------------------------------------------------------------------
if __name__ == '__main__':
    df, ts = load_db()
" > scripts/main.py
# TEMPLATE DONE

echo "import pickle
from functools import wraps

INDENT = 0
def pr(*args, **kwargs):  # print substitute
    'A reported call tree aware print function'
    pre = '|' + ('-' * INDENT) + '| '
    print(pre, *args, **kwargs)

def report(fn):
    'report the beginning and ending of this functions calls.'
    B, G, R, CLR = '\033[94m', '\033[92m','\033[91m', '\033[0m'
    import time
    def new_fn(*args, **kwargs):
        global INDENT
        INDENT, start = INDENT + 2, time.time()
        print(R, '> starting ', CLR, fn.__name__,
            '{}...'.format(fn.__doc__[:20]))

        results = fn(*args, **kwargs)

        INDENT, end = INDENT - 2, time.time()
        print(G, '> complete ', CLR, fn.__name__,
                'In {}{}{} seconds'.format(B, end - start, CLR))
        print('')
        return results
    return new_fn

def cache(fn):
    '''
    save results of this function to file for future caching
    Kwargs are not counted in function signature
    '''
    root = '../cache/'

    @wraps(fn)
    def new_fn(*args, **kwargs):
        name, key = fn.__name__, (fn.__name__, args)
        # Try to read index. Assume does not exist otherwise
        try:
            cache = pickle.load(open(root + 'index', 'rb'))
        except:
            cache = {}
        #Check cache for answers
        if key in cache.keys():
            pr('Found cached. Name: ', cache[key])
            with open(root + cache[key], 'rb') as fl:
                result = pickle.load(fl)
        else:
            pr('Calculating. Not found in cache...')
            result = fn(*args, **kwargs)  # Calculate
            new_result_name = str(max([int(i) for i in cache.values()] + [0]) + 1)
            with open(root + new_result_name, 'wb') as fl:
                pickle.dump(result, fl)  # Save results
            with open(root + 'index', 'wb') as fl:
                cache[key] = new_result_name
                pickle.dump(cache, fl)  # update cache index
            pr('Saved to cache for future runs. Name: ', new_result_name)
        return result
    return new_fn
" > scripts/mlpr.py

echo "Creating environment"
virtualenv -p python3 env
source env/bin/activate
pip install numpy scipy sklearn pandas tqdm matplotlib pillow seaborn
pip freeze > requirements.txt
echo "Complete"
